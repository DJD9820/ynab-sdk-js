"use strict";
/// <reference path="./portable-fetch.d.ts" />
// tslint:disable
/**
 * YNAB API Explorer
 * A read-only JSON / REST API to access YNAB budget data.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
// Requiring portable-fetch like this ensures that we have a global fetch function
// That makes it easier to override with modules like fetch-mock
require("portable-fetch");
const BASE_PATH = "https://api.youneedabudget.com/v1/";
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
class BaseAPI {
    constructor(configuration, basePath = BASE_PATH, fetchFunction = fetch) {
        this.basePath = basePath;
        this.fetchFunction = fetchFunction;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
    }
}
exports.RequiredError = RequiredError;
/**
 * AccountsApi - fetch parameter creator
 * @export
 */
exports.AccountsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Find a single account by ID
         * @summary Single account
         * @param {string} budgetId ID of budget
         * @param {string} accountId ID of account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountById(budgetId, accountId, options = {}) {
            // verify required parameter 'budgetId' is not null or undefined
            if (budgetId === null || budgetId === undefined) {
                throw new RequiredError('budgetId', 'Required parameter budgetId was null or undefined when calling getAccountById.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId', 'Required parameter accountId was null or undefined when calling getAccountById.');
            }
            const localVarPath = `/budgets/{budget_id}/accounts/{account_id}`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all accounts
         * @summary List accounts
         * @param {string} budgetId ID of budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccounts(budgetId, options = {}) {
            // verify required parameter 'budgetId' is not null or undefined
            if (budgetId === null || budgetId === undefined) {
                throw new RequiredError('budgetId', 'Required parameter budgetId was null or undefined when calling getAccounts.');
            }
            const localVarPath = `/budgets/{budget_id}/accounts`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AccountsApi - functional programming interface
 * @export
 */
exports.AccountsApiFp = function (configuration) {
    return {
        /**
         * Find a single account by ID
         * @summary Single account
         * @param {string} budgetId ID of budget
         * @param {string} accountId ID of account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountById(budgetId, accountId, options) {
            const localVarFetchArgs = exports.AccountsApiFetchParamCreator(configuration).getAccountById(budgetId, accountId, options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
        /**
         * List all accounts
         * @summary List accounts
         * @param {string} budgetId ID of budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccounts(budgetId, options) {
            const localVarFetchArgs = exports.AccountsApiFetchParamCreator(configuration).getAccounts(budgetId, options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
    };
};
/**
 * AccountsApi - factory interface
 * @export
 */
exports.AccountsApiFactory = function (configuration, fetchFunction, basePath) {
    return {
        /**
         * Find a single account by ID
         * @summary Single account
         * @param {string} budgetId ID of budget
         * @param {string} accountId ID of account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountById(budgetId, accountId, options) {
            return exports.AccountsApiFp(configuration).getAccountById(budgetId, accountId, options)(fetchFunction, basePath);
        },
        /**
         * List all accounts
         * @summary List accounts
         * @param {string} budgetId ID of budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccounts(budgetId, options) {
            return exports.AccountsApiFp(configuration).getAccounts(budgetId, options)(fetchFunction, basePath);
        },
    };
};
/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
class AccountsApi extends BaseAPI {
    /**
     * Find a single account by ID
     * @summary Single account
     * @param {} budgetId ID of budget
     * @param {} accountId ID of account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    getAccountById(budgetId, accountId, options) {
        return exports.AccountsApiFp(this.configuration).getAccountById(budgetId, accountId, options)(this.fetchFunction, this.basePath);
    }
    /**
     * List all accounts
     * @summary List accounts
     * @param {} budgetId ID of budget
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    getAccounts(budgetId, options) {
        return exports.AccountsApiFp(this.configuration).getAccounts(budgetId, options)(this.fetchFunction, this.basePath);
    }
}
exports.AccountsApi = AccountsApi;
/**
 * BudgetsApi - fetch parameter creator
 * @export
 */
exports.BudgetsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Single budget detail
         * @summary Single budget
         * @param {string} budgetId ID of budget
         * @param {number} [lastKnowledgeOfServer] Starting server knowledge.  If provided, only entities that have changed since last_knowledge_of_server will be included.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetContents(budgetId, lastKnowledgeOfServer, options = {}) {
            // verify required parameter 'budgetId' is not null or undefined
            if (budgetId === null || budgetId === undefined) {
                throw new RequiredError('budgetId', 'Required parameter budgetId was null or undefined when calling getBudgetContents.');
            }
            const localVarPath = `/budgets/{budget_id}`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (lastKnowledgeOfServer !== undefined) {
                localVarQueryParameter['last_knowledge_of_server'] = lastKnowledgeOfServer;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all budgets
         * @summary List budgets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgets(options = {}) {
            const localVarPath = `/budgets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * BudgetsApi - functional programming interface
 * @export
 */
exports.BudgetsApiFp = function (configuration) {
    return {
        /**
         * Single budget detail
         * @summary Single budget
         * @param {string} budgetId ID of budget
         * @param {number} [lastKnowledgeOfServer] Starting server knowledge.  If provided, only entities that have changed since last_knowledge_of_server will be included.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetContents(budgetId, lastKnowledgeOfServer, options) {
            const localVarFetchArgs = exports.BudgetsApiFetchParamCreator(configuration).getBudgetContents(budgetId, lastKnowledgeOfServer, options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
        /**
         * List all budgets
         * @summary List budgets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgets(options) {
            const localVarFetchArgs = exports.BudgetsApiFetchParamCreator(configuration).getBudgets(options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
    };
};
/**
 * BudgetsApi - factory interface
 * @export
 */
exports.BudgetsApiFactory = function (configuration, fetchFunction, basePath) {
    return {
        /**
         * Single budget detail
         * @summary Single budget
         * @param {string} budgetId ID of budget
         * @param {number} [lastKnowledgeOfServer] Starting server knowledge.  If provided, only entities that have changed since last_knowledge_of_server will be included.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetContents(budgetId, lastKnowledgeOfServer, options) {
            return exports.BudgetsApiFp(configuration).getBudgetContents(budgetId, lastKnowledgeOfServer, options)(fetchFunction, basePath);
        },
        /**
         * List all budgets
         * @summary List budgets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgets(options) {
            return exports.BudgetsApiFp(configuration).getBudgets(options)(fetchFunction, basePath);
        },
    };
};
/**
 * BudgetsApi - object-oriented interface
 * @export
 * @class BudgetsApi
 * @extends {BaseAPI}
 */
class BudgetsApi extends BaseAPI {
    /**
     * Single budget detail
     * @summary Single budget
     * @param {} budgetId ID of budget
     * @param {} [lastKnowledgeOfServer] Starting server knowledge.  If provided, only entities that have changed since last_knowledge_of_server will be included.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetsApi
     */
    getBudgetContents(budgetId, lastKnowledgeOfServer, options) {
        return exports.BudgetsApiFp(this.configuration).getBudgetContents(budgetId, lastKnowledgeOfServer, options)(this.fetchFunction, this.basePath);
    }
    /**
     * List all budgets
     * @summary List budgets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetsApi
     */
    getBudgets(options) {
        return exports.BudgetsApiFp(this.configuration).getBudgets(options)(this.fetchFunction, this.basePath);
    }
}
exports.BudgetsApi = BudgetsApi;
/**
 * CategoriesApi - fetch parameter creator
 * @export
 */
exports.CategoriesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * List all category groups
         * @summary List category groups
         * @param {string} budgetId ID of budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(budgetId, options = {}) {
            // verify required parameter 'budgetId' is not null or undefined
            if (budgetId === null || budgetId === undefined) {
                throw new RequiredError('budgetId', 'Required parameter budgetId was null or undefined when calling getCategories.');
            }
            const localVarPath = `/budgets/{budget_id}/categories`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find a category by ID
         * @summary Single category
         * @param {string} budgetId ID of budget
         * @param {string} categoryId ID of category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryById(budgetId, categoryId, options = {}) {
            // verify required parameter 'budgetId' is not null or undefined
            if (budgetId === null || budgetId === undefined) {
                throw new RequiredError('budgetId', 'Required parameter budgetId was null or undefined when calling getCategoryById.');
            }
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling getCategoryById.');
            }
            const localVarPath = `/budgets/{budget_id}/categories/{category_id}`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId)))
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CategoriesApi - functional programming interface
 * @export
 */
exports.CategoriesApiFp = function (configuration) {
    return {
        /**
         * List all category groups
         * @summary List category groups
         * @param {string} budgetId ID of budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(budgetId, options) {
            const localVarFetchArgs = exports.CategoriesApiFetchParamCreator(configuration).getCategories(budgetId, options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
        /**
         * Find a category by ID
         * @summary Single category
         * @param {string} budgetId ID of budget
         * @param {string} categoryId ID of category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryById(budgetId, categoryId, options) {
            const localVarFetchArgs = exports.CategoriesApiFetchParamCreator(configuration).getCategoryById(budgetId, categoryId, options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
    };
};
/**
 * CategoriesApi - factory interface
 * @export
 */
exports.CategoriesApiFactory = function (configuration, fetchFunction, basePath) {
    return {
        /**
         * List all category groups
         * @summary List category groups
         * @param {string} budgetId ID of budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(budgetId, options) {
            return exports.CategoriesApiFp(configuration).getCategories(budgetId, options)(fetchFunction, basePath);
        },
        /**
         * Find a category by ID
         * @summary Single category
         * @param {string} budgetId ID of budget
         * @param {string} categoryId ID of category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoryById(budgetId, categoryId, options) {
            return exports.CategoriesApiFp(configuration).getCategoryById(budgetId, categoryId, options)(fetchFunction, basePath);
        },
    };
};
/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
class CategoriesApi extends BaseAPI {
    /**
     * List all category groups
     * @summary List category groups
     * @param {} budgetId ID of budget
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    getCategories(budgetId, options) {
        return exports.CategoriesApiFp(this.configuration).getCategories(budgetId, options)(this.fetchFunction, this.basePath);
    }
    /**
     * Find a category by ID
     * @summary Single category
     * @param {} budgetId ID of budget
     * @param {} categoryId ID of category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    getCategoryById(budgetId, categoryId, options) {
        return exports.CategoriesApiFp(this.configuration).getCategoryById(budgetId, categoryId, options)(this.fetchFunction, this.basePath);
    }
}
exports.CategoriesApi = CategoriesApi;
/**
 * MonthsApi - fetch parameter creator
 * @export
 */
exports.MonthsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Find a single budget month
         * @summary Single budget month
         * @param {string} budgetId ID of budget
         * @param {string} month The budget month.  \&quot;current\&quot; can also be used to specify the current calendar month (UTC).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetMonthById(budgetId, month, options = {}) {
            // verify required parameter 'budgetId' is not null or undefined
            if (budgetId === null || budgetId === undefined) {
                throw new RequiredError('budgetId', 'Required parameter budgetId was null or undefined when calling getBudgetMonthById.');
            }
            // verify required parameter 'month' is not null or undefined
            if (month === null || month === undefined) {
                throw new RequiredError('month', 'Required parameter month was null or undefined when calling getBudgetMonthById.');
            }
            const localVarPath = `/budgets/{budget_id}/months/{month}`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId)))
                .replace(`{${"month"}}`, encodeURIComponent(String(month)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all budget months
         * @summary List budget months
         * @param {string} budgetId ID of budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetMonths(budgetId, options = {}) {
            // verify required parameter 'budgetId' is not null or undefined
            if (budgetId === null || budgetId === undefined) {
                throw new RequiredError('budgetId', 'Required parameter budgetId was null or undefined when calling getBudgetMonths.');
            }
            const localVarPath = `/budgets/{budget_id}/months`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MonthsApi - functional programming interface
 * @export
 */
exports.MonthsApiFp = function (configuration) {
    return {
        /**
         * Find a single budget month
         * @summary Single budget month
         * @param {string} budgetId ID of budget
         * @param {string} month The budget month.  \&quot;current\&quot; can also be used to specify the current calendar month (UTC).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetMonthById(budgetId, month, options) {
            const localVarFetchArgs = exports.MonthsApiFetchParamCreator(configuration).getBudgetMonthById(budgetId, month, options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
        /**
         * List all budget months
         * @summary List budget months
         * @param {string} budgetId ID of budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetMonths(budgetId, options) {
            const localVarFetchArgs = exports.MonthsApiFetchParamCreator(configuration).getBudgetMonths(budgetId, options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
    };
};
/**
 * MonthsApi - factory interface
 * @export
 */
exports.MonthsApiFactory = function (configuration, fetchFunction, basePath) {
    return {
        /**
         * Find a single budget month
         * @summary Single budget month
         * @param {string} budgetId ID of budget
         * @param {string} month The budget month.  \&quot;current\&quot; can also be used to specify the current calendar month (UTC).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetMonthById(budgetId, month, options) {
            return exports.MonthsApiFp(configuration).getBudgetMonthById(budgetId, month, options)(fetchFunction, basePath);
        },
        /**
         * List all budget months
         * @summary List budget months
         * @param {string} budgetId ID of budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetMonths(budgetId, options) {
            return exports.MonthsApiFp(configuration).getBudgetMonths(budgetId, options)(fetchFunction, basePath);
        },
    };
};
/**
 * MonthsApi - object-oriented interface
 * @export
 * @class MonthsApi
 * @extends {BaseAPI}
 */
class MonthsApi extends BaseAPI {
    /**
     * Find a single budget month
     * @summary Single budget month
     * @param {} budgetId ID of budget
     * @param {} month The budget month.  \&quot;current\&quot; can also be used to specify the current calendar month (UTC).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonthsApi
     */
    getBudgetMonthById(budgetId, month, options) {
        return exports.MonthsApiFp(this.configuration).getBudgetMonthById(budgetId, month, options)(this.fetchFunction, this.basePath);
    }
    /**
     * List all budget months
     * @summary List budget months
     * @param {} budgetId ID of budget
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonthsApi
     */
    getBudgetMonths(budgetId, options) {
        return exports.MonthsApiFp(this.configuration).getBudgetMonths(budgetId, options)(this.fetchFunction, this.basePath);
    }
}
exports.MonthsApi = MonthsApi;
/**
 * PayeeLocationsApi - fetch parameter creator
 * @export
 */
exports.PayeeLocationsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Find a single payee location by ID
         * @summary Single payee location
         * @param {string} budgetId ID of budget
         * @param {string} payeeLocationId ID of payee location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayeeLocationById(budgetId, payeeLocationId, options = {}) {
            // verify required parameter 'budgetId' is not null or undefined
            if (budgetId === null || budgetId === undefined) {
                throw new RequiredError('budgetId', 'Required parameter budgetId was null or undefined when calling getPayeeLocationById.');
            }
            // verify required parameter 'payeeLocationId' is not null or undefined
            if (payeeLocationId === null || payeeLocationId === undefined) {
                throw new RequiredError('payeeLocationId', 'Required parameter payeeLocationId was null or undefined when calling getPayeeLocationById.');
            }
            const localVarPath = `/budgets/{budget_id}/payee_locations/{payee_location_id}`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId)))
                .replace(`{${"payee_location_id"}}`, encodeURIComponent(String(payeeLocationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all payee locations
         * @summary List payee locations
         * @param {string} budgetId ID of budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayeeLocations(budgetId, options = {}) {
            // verify required parameter 'budgetId' is not null or undefined
            if (budgetId === null || budgetId === undefined) {
                throw new RequiredError('budgetId', 'Required parameter budgetId was null or undefined when calling getPayeeLocations.');
            }
            const localVarPath = `/budgets/{budget_id}/payee_locations`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List payee locations for a specified payee
         * @summary List locations for a payee
         * @param {string} budgetId ID of budget
         * @param {string} payeeId ID of payee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayeeLocationsByPayee(budgetId, payeeId, options = {}) {
            // verify required parameter 'budgetId' is not null or undefined
            if (budgetId === null || budgetId === undefined) {
                throw new RequiredError('budgetId', 'Required parameter budgetId was null or undefined when calling getPayeeLocationsByPayee.');
            }
            // verify required parameter 'payeeId' is not null or undefined
            if (payeeId === null || payeeId === undefined) {
                throw new RequiredError('payeeId', 'Required parameter payeeId was null or undefined when calling getPayeeLocationsByPayee.');
            }
            const localVarPath = `/budgets/{budget_id}/payees/{payee_id}/payee_locations`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId)))
                .replace(`{${"payee_id"}}`, encodeURIComponent(String(payeeId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * PayeeLocationsApi - functional programming interface
 * @export
 */
exports.PayeeLocationsApiFp = function (configuration) {
    return {
        /**
         * Find a single payee location by ID
         * @summary Single payee location
         * @param {string} budgetId ID of budget
         * @param {string} payeeLocationId ID of payee location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayeeLocationById(budgetId, payeeLocationId, options) {
            const localVarFetchArgs = exports.PayeeLocationsApiFetchParamCreator(configuration).getPayeeLocationById(budgetId, payeeLocationId, options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
        /**
         * List all payee locations
         * @summary List payee locations
         * @param {string} budgetId ID of budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayeeLocations(budgetId, options) {
            const localVarFetchArgs = exports.PayeeLocationsApiFetchParamCreator(configuration).getPayeeLocations(budgetId, options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
        /**
         * List payee locations for a specified payee
         * @summary List locations for a payee
         * @param {string} budgetId ID of budget
         * @param {string} payeeId ID of payee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayeeLocationsByPayee(budgetId, payeeId, options) {
            const localVarFetchArgs = exports.PayeeLocationsApiFetchParamCreator(configuration).getPayeeLocationsByPayee(budgetId, payeeId, options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
    };
};
/**
 * PayeeLocationsApi - factory interface
 * @export
 */
exports.PayeeLocationsApiFactory = function (configuration, fetchFunction, basePath) {
    return {
        /**
         * Find a single payee location by ID
         * @summary Single payee location
         * @param {string} budgetId ID of budget
         * @param {string} payeeLocationId ID of payee location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayeeLocationById(budgetId, payeeLocationId, options) {
            return exports.PayeeLocationsApiFp(configuration).getPayeeLocationById(budgetId, payeeLocationId, options)(fetchFunction, basePath);
        },
        /**
         * List all payee locations
         * @summary List payee locations
         * @param {string} budgetId ID of budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayeeLocations(budgetId, options) {
            return exports.PayeeLocationsApiFp(configuration).getPayeeLocations(budgetId, options)(fetchFunction, basePath);
        },
        /**
         * List payee locations for a specified payee
         * @summary List locations for a payee
         * @param {string} budgetId ID of budget
         * @param {string} payeeId ID of payee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayeeLocationsByPayee(budgetId, payeeId, options) {
            return exports.PayeeLocationsApiFp(configuration).getPayeeLocationsByPayee(budgetId, payeeId, options)(fetchFunction, basePath);
        },
    };
};
/**
 * PayeeLocationsApi - object-oriented interface
 * @export
 * @class PayeeLocationsApi
 * @extends {BaseAPI}
 */
class PayeeLocationsApi extends BaseAPI {
    /**
     * Find a single payee location by ID
     * @summary Single payee location
     * @param {} budgetId ID of budget
     * @param {} payeeLocationId ID of payee location
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayeeLocationsApi
     */
    getPayeeLocationById(budgetId, payeeLocationId, options) {
        return exports.PayeeLocationsApiFp(this.configuration).getPayeeLocationById(budgetId, payeeLocationId, options)(this.fetchFunction, this.basePath);
    }
    /**
     * List all payee locations
     * @summary List payee locations
     * @param {} budgetId ID of budget
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayeeLocationsApi
     */
    getPayeeLocations(budgetId, options) {
        return exports.PayeeLocationsApiFp(this.configuration).getPayeeLocations(budgetId, options)(this.fetchFunction, this.basePath);
    }
    /**
     * List payee locations for a specified payee
     * @summary List locations for a payee
     * @param {} budgetId ID of budget
     * @param {} payeeId ID of payee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayeeLocationsApi
     */
    getPayeeLocationsByPayee(budgetId, payeeId, options) {
        return exports.PayeeLocationsApiFp(this.configuration).getPayeeLocationsByPayee(budgetId, payeeId, options)(this.fetchFunction, this.basePath);
    }
}
exports.PayeeLocationsApi = PayeeLocationsApi;
/**
 * PayeesApi - fetch parameter creator
 * @export
 */
exports.PayeesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Find a single payee by ID
         * @summary Single payee
         * @param {string} budgetId ID of budget
         * @param {string} payeeId ID of payee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayeeById(budgetId, payeeId, options = {}) {
            // verify required parameter 'budgetId' is not null or undefined
            if (budgetId === null || budgetId === undefined) {
                throw new RequiredError('budgetId', 'Required parameter budgetId was null or undefined when calling getPayeeById.');
            }
            // verify required parameter 'payeeId' is not null or undefined
            if (payeeId === null || payeeId === undefined) {
                throw new RequiredError('payeeId', 'Required parameter payeeId was null or undefined when calling getPayeeById.');
            }
            const localVarPath = `/budgets/{budget_id}/payees/{payee_id}`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId)))
                .replace(`{${"payee_id"}}`, encodeURIComponent(String(payeeId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all payees
         * @summary List payees
         * @param {string} budgetId ID of budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayees(budgetId, options = {}) {
            // verify required parameter 'budgetId' is not null or undefined
            if (budgetId === null || budgetId === undefined) {
                throw new RequiredError('budgetId', 'Required parameter budgetId was null or undefined when calling getPayees.');
            }
            const localVarPath = `/budgets/{budget_id}/payees`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * PayeesApi - functional programming interface
 * @export
 */
exports.PayeesApiFp = function (configuration) {
    return {
        /**
         * Find a single payee by ID
         * @summary Single payee
         * @param {string} budgetId ID of budget
         * @param {string} payeeId ID of payee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayeeById(budgetId, payeeId, options) {
            const localVarFetchArgs = exports.PayeesApiFetchParamCreator(configuration).getPayeeById(budgetId, payeeId, options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
        /**
         * List all payees
         * @summary List payees
         * @param {string} budgetId ID of budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayees(budgetId, options) {
            const localVarFetchArgs = exports.PayeesApiFetchParamCreator(configuration).getPayees(budgetId, options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
    };
};
/**
 * PayeesApi - factory interface
 * @export
 */
exports.PayeesApiFactory = function (configuration, fetchFunction, basePath) {
    return {
        /**
         * Find a single payee by ID
         * @summary Single payee
         * @param {string} budgetId ID of budget
         * @param {string} payeeId ID of payee
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayeeById(budgetId, payeeId, options) {
            return exports.PayeesApiFp(configuration).getPayeeById(budgetId, payeeId, options)(fetchFunction, basePath);
        },
        /**
         * List all payees
         * @summary List payees
         * @param {string} budgetId ID of budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayees(budgetId, options) {
            return exports.PayeesApiFp(configuration).getPayees(budgetId, options)(fetchFunction, basePath);
        },
    };
};
/**
 * PayeesApi - object-oriented interface
 * @export
 * @class PayeesApi
 * @extends {BaseAPI}
 */
class PayeesApi extends BaseAPI {
    /**
     * Find a single payee by ID
     * @summary Single payee
     * @param {} budgetId ID of budget
     * @param {} payeeId ID of payee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayeesApi
     */
    getPayeeById(budgetId, payeeId, options) {
        return exports.PayeesApiFp(this.configuration).getPayeeById(budgetId, payeeId, options)(this.fetchFunction, this.basePath);
    }
    /**
     * List all payees
     * @summary List payees
     * @param {} budgetId ID of budget
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayeesApi
     */
    getPayees(budgetId, options) {
        return exports.PayeesApiFp(this.configuration).getPayees(budgetId, options)(this.fetchFunction, this.basePath);
    }
}
exports.PayeesApi = PayeesApi;
/**
 * ScheduledTransactionsApi - fetch parameter creator
 * @export
 */
exports.ScheduledTransactionsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Find a single scheduled transaction by ID
         * @summary Single scheduled transaction
         * @param {string} budgetId ID of budget
         * @param {string} scheduledTransactionId ID of scheduled transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledTransactionById(budgetId, scheduledTransactionId, options = {}) {
            // verify required parameter 'budgetId' is not null or undefined
            if (budgetId === null || budgetId === undefined) {
                throw new RequiredError('budgetId', 'Required parameter budgetId was null or undefined when calling getScheduledTransactionById.');
            }
            // verify required parameter 'scheduledTransactionId' is not null or undefined
            if (scheduledTransactionId === null || scheduledTransactionId === undefined) {
                throw new RequiredError('scheduledTransactionId', 'Required parameter scheduledTransactionId was null or undefined when calling getScheduledTransactionById.');
            }
            const localVarPath = `/budgets/{budget_id}/scheduled_transactions/{scheduled_transaction_id}`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId)))
                .replace(`{${"scheduled_transaction_id"}}`, encodeURIComponent(String(scheduledTransactionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all scheduled transactions
         * @summary List scheduled transactions
         * @param {string} budgetId ID of budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledTransactions(budgetId, options = {}) {
            // verify required parameter 'budgetId' is not null or undefined
            if (budgetId === null || budgetId === undefined) {
                throw new RequiredError('budgetId', 'Required parameter budgetId was null or undefined when calling getScheduledTransactions.');
            }
            const localVarPath = `/budgets/{budget_id}/scheduled_transactions`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ScheduledTransactionsApi - functional programming interface
 * @export
 */
exports.ScheduledTransactionsApiFp = function (configuration) {
    return {
        /**
         * Find a single scheduled transaction by ID
         * @summary Single scheduled transaction
         * @param {string} budgetId ID of budget
         * @param {string} scheduledTransactionId ID of scheduled transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledTransactionById(budgetId, scheduledTransactionId, options) {
            const localVarFetchArgs = exports.ScheduledTransactionsApiFetchParamCreator(configuration).getScheduledTransactionById(budgetId, scheduledTransactionId, options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
        /**
         * List all scheduled transactions
         * @summary List scheduled transactions
         * @param {string} budgetId ID of budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledTransactions(budgetId, options) {
            const localVarFetchArgs = exports.ScheduledTransactionsApiFetchParamCreator(configuration).getScheduledTransactions(budgetId, options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
    };
};
/**
 * ScheduledTransactionsApi - factory interface
 * @export
 */
exports.ScheduledTransactionsApiFactory = function (configuration, fetchFunction, basePath) {
    return {
        /**
         * Find a single scheduled transaction by ID
         * @summary Single scheduled transaction
         * @param {string} budgetId ID of budget
         * @param {string} scheduledTransactionId ID of scheduled transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledTransactionById(budgetId, scheduledTransactionId, options) {
            return exports.ScheduledTransactionsApiFp(configuration).getScheduledTransactionById(budgetId, scheduledTransactionId, options)(fetchFunction, basePath);
        },
        /**
         * List all scheduled transactions
         * @summary List scheduled transactions
         * @param {string} budgetId ID of budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledTransactions(budgetId, options) {
            return exports.ScheduledTransactionsApiFp(configuration).getScheduledTransactions(budgetId, options)(fetchFunction, basePath);
        },
    };
};
/**
 * ScheduledTransactionsApi - object-oriented interface
 * @export
 * @class ScheduledTransactionsApi
 * @extends {BaseAPI}
 */
class ScheduledTransactionsApi extends BaseAPI {
    /**
     * Find a single scheduled transaction by ID
     * @summary Single scheduled transaction
     * @param {} budgetId ID of budget
     * @param {} scheduledTransactionId ID of scheduled transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTransactionsApi
     */
    getScheduledTransactionById(budgetId, scheduledTransactionId, options) {
        return exports.ScheduledTransactionsApiFp(this.configuration).getScheduledTransactionById(budgetId, scheduledTransactionId, options)(this.fetchFunction, this.basePath);
    }
    /**
     * List all scheduled transactions
     * @summary List scheduled transactions
     * @param {} budgetId ID of budget
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledTransactionsApi
     */
    getScheduledTransactions(budgetId, options) {
        return exports.ScheduledTransactionsApiFp(this.configuration).getScheduledTransactions(budgetId, options)(this.fetchFunction, this.basePath);
    }
}
exports.ScheduledTransactionsApi = ScheduledTransactionsApi;
/**
 * TransactionsApi - fetch parameter creator
 * @export
 */
exports.TransactionsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * List all transactions
         * @summary List transactions
         * @param {string} budgetId ID of budget
         * @param {string} [sinceDate] Only return transactions on or after this date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactions(budgetId, sinceDate, options = {}) {
            // verify required parameter 'budgetId' is not null or undefined
            if (budgetId === null || budgetId === undefined) {
                throw new RequiredError('budgetId', 'Required parameter budgetId was null or undefined when calling getTransactions.');
            }
            const localVarPath = `/budgets/{budget_id}/transactions`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (sinceDate !== undefined) {
                localVarQueryParameter['since_date'] = sinceDate.toISOString();
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List transactions for an account
         * @summary List account transactions
         * @param {string} budgetId ID of budget
         * @param {string} accountId ID of account
         * @param {string} [sinceDate] Only return transactions on or after this date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionsByAccount(budgetId, accountId, sinceDate, options = {}) {
            // verify required parameter 'budgetId' is not null or undefined
            if (budgetId === null || budgetId === undefined) {
                throw new RequiredError('budgetId', 'Required parameter budgetId was null or undefined when calling getTransactionsByAccount.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId', 'Required parameter accountId was null or undefined when calling getTransactionsByAccount.');
            }
            const localVarPath = `/budgets/{budget_id}/accounts/{account_id}/transactions`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (sinceDate !== undefined) {
                localVarQueryParameter['since_date'] = sinceDate.toISOString();
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List transactions for a category
         * @summary List category transactions
         * @param {string} budgetId ID of budget
         * @param {string} categoryId ID of category
         * @param {string} [sinceDate] Only return transactions on or after this date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionsByCategory(budgetId, categoryId, sinceDate, options = {}) {
            // verify required parameter 'budgetId' is not null or undefined
            if (budgetId === null || budgetId === undefined) {
                throw new RequiredError('budgetId', 'Required parameter budgetId was null or undefined when calling getTransactionsByCategory.');
            }
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling getTransactionsByCategory.');
            }
            const localVarPath = `/budgets/{budget_id}/categories/{category_id}/transactions`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId)))
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            if (sinceDate !== undefined) {
                localVarQueryParameter['since_date'] = sinceDate.toISOString();
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find a single transaction by ID
         * @summary Single transaction
         * @param {string} budgetId ID of budget
         * @param {string} transactionId ID of transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionsById(budgetId, transactionId, options = {}) {
            // verify required parameter 'budgetId' is not null or undefined
            if (budgetId === null || budgetId === undefined) {
                throw new RequiredError('budgetId', 'Required parameter budgetId was null or undefined when calling getTransactionsById.');
            }
            // verify required parameter 'transactionId' is not null or undefined
            if (transactionId === null || transactionId === undefined) {
                throw new RequiredError('transactionId', 'Required parameter transactionId was null or undefined when calling getTransactionsById.');
            }
            const localVarPath = `/budgets/{budget_id}/transactions/{transaction_id}`
                .replace(`{${"budget_id"}}`, encodeURIComponent(String(budgetId)))
                .replace(`{${"transaction_id"}}`, encodeURIComponent(String(transactionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TransactionsApi - functional programming interface
 * @export
 */
exports.TransactionsApiFp = function (configuration) {
    return {
        /**
         * List all transactions
         * @summary List transactions
         * @param {string} budgetId ID of budget
         * @param {string} [sinceDate] Only return transactions on or after this date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactions(budgetId, sinceDate, options) {
            const localVarFetchArgs = exports.TransactionsApiFetchParamCreator(configuration).getTransactions(budgetId, sinceDate, options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
        /**
         * List transactions for an account
         * @summary List account transactions
         * @param {string} budgetId ID of budget
         * @param {string} accountId ID of account
         * @param {string} [sinceDate] Only return transactions on or after this date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionsByAccount(budgetId, accountId, sinceDate, options) {
            const localVarFetchArgs = exports.TransactionsApiFetchParamCreator(configuration).getTransactionsByAccount(budgetId, accountId, sinceDate, options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
        /**
         * List transactions for a category
         * @summary List category transactions
         * @param {string} budgetId ID of budget
         * @param {string} categoryId ID of category
         * @param {string} [sinceDate] Only return transactions on or after this date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionsByCategory(budgetId, categoryId, sinceDate, options) {
            const localVarFetchArgs = exports.TransactionsApiFetchParamCreator(configuration).getTransactionsByCategory(budgetId, categoryId, sinceDate, options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
        /**
         * Find a single transaction by ID
         * @summary Single transaction
         * @param {string} budgetId ID of budget
         * @param {string} transactionId ID of transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionsById(budgetId, transactionId, options) {
            const localVarFetchArgs = exports.TransactionsApiFetchParamCreator(configuration).getTransactionsById(budgetId, transactionId, options);
            return (fetchFunction = fetch, basePath = BASE_PATH) => {
                return fetchFunction(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        return response.json().then((e) => {
                            return Promise.reject(e);
                        });
                    }
                });
            };
        },
    };
};
/**
 * TransactionsApi - factory interface
 * @export
 */
exports.TransactionsApiFactory = function (configuration, fetchFunction, basePath) {
    return {
        /**
         * List all transactions
         * @summary List transactions
         * @param {string} budgetId ID of budget
         * @param {string} [sinceDate] Only return transactions on or after this date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactions(budgetId, sinceDate, options) {
            return exports.TransactionsApiFp(configuration).getTransactions(budgetId, sinceDate, options)(fetchFunction, basePath);
        },
        /**
         * List transactions for an account
         * @summary List account transactions
         * @param {string} budgetId ID of budget
         * @param {string} accountId ID of account
         * @param {string} [sinceDate] Only return transactions on or after this date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionsByAccount(budgetId, accountId, sinceDate, options) {
            return exports.TransactionsApiFp(configuration).getTransactionsByAccount(budgetId, accountId, sinceDate, options)(fetchFunction, basePath);
        },
        /**
         * List transactions for a category
         * @summary List category transactions
         * @param {string} budgetId ID of budget
         * @param {string} categoryId ID of category
         * @param {string} [sinceDate] Only return transactions on or after this date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionsByCategory(budgetId, categoryId, sinceDate, options) {
            return exports.TransactionsApiFp(configuration).getTransactionsByCategory(budgetId, categoryId, sinceDate, options)(fetchFunction, basePath);
        },
        /**
         * Find a single transaction by ID
         * @summary Single transaction
         * @param {string} budgetId ID of budget
         * @param {string} transactionId ID of transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionsById(budgetId, transactionId, options) {
            return exports.TransactionsApiFp(configuration).getTransactionsById(budgetId, transactionId, options)(fetchFunction, basePath);
        },
    };
};
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
class TransactionsApi extends BaseAPI {
    /**
     * List all transactions
     * @summary List transactions
     * @param {} budgetId ID of budget
     * @param {} [sinceDate] Only return transactions on or after this date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransactions(budgetId, sinceDate, options) {
        return exports.TransactionsApiFp(this.configuration).getTransactions(budgetId, sinceDate, options)(this.fetchFunction, this.basePath);
    }
    /**
     * List transactions for an account
     * @summary List account transactions
     * @param {} budgetId ID of budget
     * @param {} accountId ID of account
     * @param {} [sinceDate] Only return transactions on or after this date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransactionsByAccount(budgetId, accountId, sinceDate, options) {
        return exports.TransactionsApiFp(this.configuration).getTransactionsByAccount(budgetId, accountId, sinceDate, options)(this.fetchFunction, this.basePath);
    }
    /**
     * List transactions for a category
     * @summary List category transactions
     * @param {} budgetId ID of budget
     * @param {} categoryId ID of category
     * @param {} [sinceDate] Only return transactions on or after this date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransactionsByCategory(budgetId, categoryId, sinceDate, options) {
        return exports.TransactionsApiFp(this.configuration).getTransactionsByCategory(budgetId, categoryId, sinceDate, options)(this.fetchFunction, this.basePath);
    }
    /**
     * Find a single transaction by ID
     * @summary Single transaction
     * @param {} budgetId ID of budget
     * @param {} transactionId ID of transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransactionsById(budgetId, transactionId, options) {
        return exports.TransactionsApiFp(this.configuration).getTransactionsById(budgetId, transactionId, options)(this.fetchFunction, this.basePath);
    }
}
exports.TransactionsApi = TransactionsApi;
//# sourceMappingURL=api.js.map